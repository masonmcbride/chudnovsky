from mpmath import mp, mpf, gamma, sqrt, factorial

mp.dps = 50

t = (
    mpf('1095255033002752301233099478037584') / mpf('2050242335692983321671746996556833')
    + (mpf('1006588064225996719872149534306400') / mpf('34854119706780716468419698941466161')) * sqrt(17) * sqrt(5)
    + (mpf('692779168175128551453280427070000') / mpf('34854119706780716468419698941466161')) * sqrt(17)
    - (mpf('136434536163779492503565618457696') / mpf('2050242335692983321671746996556833')) * sqrt(5)
    + (mpf('400179322879781860521299209248000') / mpf('26653150364008783181732710955238829')) * sqrt(13)
    + (mpf('1077564413015882021519209726762688') / mpf('453103556188149314089456086239060093')) * sqrt(13) * sqrt(17) * sqrt(5)
    + (mpf('120226784218523863048087030809600') / mpf('64729079455449902012779440891294299')) * sqrt(17) * sqrt(13)
    + (mpf('239369594240980944219359445009600') / mpf('26653150364008783181732710955238829')) * sqrt(13) * sqrt(5)
)

L = (mpf(4) + sqrt(17))**6 * (mpf(8) + sqrt(65))**6 * ((mpf(1) + sqrt(5)) / 2) * ((mpf(15) + sqrt(221)) / 2)**6
J = mpf(64) * L / ((L - 1) * (9 * L - 3)**3)

def poch(x, k):
    return gamma(x + k) / gamma(x)

def hyper_3F2_BC(k):
    return (poch(mpf(1)/6, k) * poch(mpf(5)/6, k) * poch(mpf(1)/2, k)) / (factorial(k)**3)

def pi(N):
    series_sum = mp.nsum(lambda k: hyper_3F2_BC(k) * (6*k + mpf(1) - t) * J**k, [0, N-1])
    #series_sum = sum(hyper_3F2_BC(k) * (6*k + 1 - t) * J**k for k in range(N))
    return mpf(6) / (sqrt(3315 * (1 - J)) * series_sum)

pi_1 = pi(1)
print(f"{pi_1=}")
